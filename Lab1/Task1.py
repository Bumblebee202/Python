def _ShowVariableInfo(variable):
    print(variable, type(variable), id(variable), "\n")

def _CompareObjects(obj1, obj2):
    print(f"obj1: {obj1}\nobj2: {obj2}")
    print(f"obj1 == obj2: {obj1 == obj2}")
    print(f"obj1 is obj2: {obj1 is obj2}")
    print(f"obj1 id = {id(obj1)}\nobj2 id = {id(obj2)}\n")

def Task():
    #1. Створіть змінну `x`, присвоївши їй значення `10`. Виведіть значення x, тип даних `type(x)` та `id(x)`.
    print("1.")
    x = 10
    _ShowVariableInfo(x)

    #2. Призначте `x` нове значення такого ж типу (наприклад, `20`) і знову виведіть `type(x)` та `id(x)`. Які зміни відбулися?
    print("2.")
    x = 20
    _ShowVariableInfo(x)

    #3. Призначте `x` нове значення іншого типу і знову виведіть `type(x)` та `id(x)`. Чи можна це зробити? Які зміни відбулися?
    print("3.")
    x = "Look, if you had one shot or one opportunity\nTo seize everything you ever wanted in one moment\nWould you capture it or just let it slip?\n"
    _ShowVariableInfo(x)

    #4. Створіть нову змінну `y`. Запишіть в неї значення змінної `x`. Виведіть `id(a)` та `id(b)`. Що ви отримали?
    print("4.")
    y = x
    print(id(y))
    print(id(x), "\n")

    #5. Створіть змінну, `a` та запишіть в неї значення числового типу (ціле, або дійсне число). Виведіть `id(a)`. \
    #Додайте до змінної `a` якесь число, наприклад, `a = a + 10`. Знову виведіть `id(a)`. \
    #Як ви розумієте отриманий результат?
    print("5.")
    a = .1
    print(a, id(a));
    a = a + .1
    print(a, id(a), "\n")

    #6. Створіть дві змінні, `a` і `b`, та запишіть в них однакове значення (наприклад, `3.14`). \
    #Виведіть `a == b`, `a is b`, `id(a)` та `id(b)`.\
    #Що ви отримали? Поясніть отриманий результат. В чому різниця між `a == b` та `a is b`?
    print("6.")
    a = 3.14
    b = 3.14
    _CompareObjects(a, b)

    #8. Іноді середовище виконання Python може оптимізувати зберігання даних *вбудованих типів* і не створювати нових об'єктів.\
    #Така техніка використовується в багатьох мовах програмування, які виконуються в віртуальних машинах (ВМ), наприклад, в Java. \
    #Для яких саме значень це буде оптимізовано та чи буде взагалі -- залежить від реалізації ВМ, яка виконує код.\
    #Спробуйте виконати попереднє завдання (пункт 6) з різними типами даних і опишіть отриманий результат:
    #1. Спробуйте значення `42` цілого типу.
    #2. Спробуйте значення `42123` цілого типу.
    #3. Спробуйде будь-яке дійсне число (тип `float`).
    #4. Текстовий рядок `"Hello, Python!"`.
    #5. Спробуйте інший текстовий рядок українською мовою.
    print("7.1")
    a = 42
    b = 42
    _CompareObjects(a, b)

    print("7.2")
    a = 42123
    b = 42123
    _CompareObjects(a, b)

    print("7.3")
    a = 2000.2201
    b = 2000.2201
    _CompareObjects(a, b)

    print("7.4")
    a = "Hello, Python!"
    b = "Hello, Python!"
    _CompareObjects(a, b)

    print("7.5")
    a = "Поки йде не погано"
    b = "Поки йде не погано"
    _CompareObjects(a, b)